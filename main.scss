@import 'style-vars.scss';
@import 'mixins.scss';


/* LAYOUT */

body {
  margin: 0 auto;
}

* { 
  box-sizing: border-box;
}




// nav {
//   grid-column: 1 / 4;
// }
/* let's try putting a grid on 'body' and positioningeverything ver that *

/* maybe later, first let's do header approach */

/* will need to adjust header /nav stuff to be able to ahve a sticky nav */
// header {
//   width: 100%;
//   display: grid;
//   grid-template: 1fr 1fr 1fr /  1fr 0.3fr 10%;
  
aside.social-links {
  margin-top: 1rem;
  min-width: 4rem;
  // grid-area: aside;
  display: grid;
  grid-template-rows: 3rem 3rem 3rem;
  place-items: center;
  position: fixed;
  top: 0;
  right: 10px;
  
}
.content-wrap {
  width: 95%;
  display: grid;
  place-items: center;
  
//   display: grid;
//   grid-template-areas: 
//       "nav nav nav aside"
//       "header header header aside"
//       "main main main aside"
// }
header {
  // grid-area: header;
  width: 80%;
}


  nav {
    background-color: white;
    width: 100%;
    height: 3em;
    display: grid;
    grid-template-columns: repeat(5, 1fr);
    place-items: center;
    position: sticky;
    top: 0;
  }

  

   header h1 {
    //  grid-column: 1 / 2;
    //  grid-row: 2 / 4;
     margin: 0 0 0 2rem;

    + p {
       margin: 0 0 1rem 3rem;
       font-size: 1.5rem;

     }
   }
 


main {
  // grid-area: main;
  display: grid;
  margin: 1rem;
  place-items: center;
  

  section.main-info {

    width: 90%;
    display: grid;
    grid-template-columns: 50% 50%;
    place-items: center;

    h2 {
      justify-self: start;
    }

    ul li {
      list-style-type: square;
    }
    

    #list-one {
      grid-row: 2 / 3;
      grid-column: 2 / 3;
      // justify-self: start;
      margin-bottom: 1rem;
    }
    #img-one {
      grid-row: 2 / 3;
      grid-column: 1 / 2;
      // place-self: end;
    }
  
    #list-two {
       grid-row: 3 / 4;
       grid-column: 1 / 2;
      //  justify-self: end;
       margin-top: 1rem;
     
    }

    #img-two {
      grid-row: 3 / 4;
      grid-column: 2 / 3;

    }
  }

  section.text {
      display: grid;
      justify-items: center;
      margin: 1rem;
      text-align: justify;

      .paragraphs {
        width: 80%;
        margin-bottom: 3rem;
      }
  }

 }

}

/* STYLES */

h1 {
  @include h1-styles;
}

h2 {
  @include h2-styles;
}

p, li {
  font-family: $paragraph-font;
}

li {
  font-size: 0.9rem;
}


nav a {
  font-family: $paragraph-font;
  text-transform: uppercase;
  text-decoration: none;
}

.paragraphs span {
  font-family: $title-font;
  font-size: 1.3rem;
  letter-spacing: 0.3rem;
  opacity: 0.8;
}


/* thought process: nav - only one row so no need to specify
I found a best practices guide in smashing magazine that suggested using the above minmax
pattern with fr to force equal distribution
*/



// nav {
//   display: grid;
//   grid-template: 1fr 1fr / repeat(5, 1fr) repeat(4, 0.5fr);
//   place-items: center;
  
// }

// .social-links {
//   width: 95%;
//   grid-column: -1 / -2;
//   display: grid;
//   grid-template-columns: 1fr 1fr;
//   // justify-items: center;
//   // align-items: end; 
//   place-items: center; /* why doesn't this (and other align attempts) work?"*/

//   a {
//        padding-top: 10%; /* fix for above problem (align not working) */
//   }
// }




